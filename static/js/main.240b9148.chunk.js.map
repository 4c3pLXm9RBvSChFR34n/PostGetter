{"version":3,"sources":["logo.svg","components/post/post.js","Loader/loader.js","api/api.js","redux/post-reducer.js","Forms/utils/validator.js","Forms/common/formControlls.js","components/postList/postList.js","App.js","serviceWorker.js","redux/redux-store.js","index.js","components/postList/postList.module.css","components/post/post.module.css","Forms/common/formControlls.module.css"],"names":["module","exports","Post","props","zeroMake","e","String","length","b","Date","created_at","dateOfPublishing","getDay","Number","getMonth","getFullYear","getHours","getMinutes","className","styles","postWrapper","postDate","classneme","authorName","id","post","text","Loader","class","API","link","axios","maxLength","initialstate","data","isLoading","inputLinkValue","gettingDataMistake","numberOfPosts","veliocityOfChange","getData","response","type","loadingStatus","badRequestAC","setFormToState","PostReducer","state","action","stateCopy","required","value","FormControl","input","meta","child","element","someError","touched","error","formcontrol","children","Input","restProps","PostList","setDataToLocalState","values","setState","getDataThunk","setInterval","updateDataThunk","this","postPage","clearInterval","interval","postArray","slice","map","p","key","postListWrapper","postListForm","PostReduxForm","onSubmit","React","Component","maxLength50","reduxForm","form","handleSubmit","Field","component","name","placeholder","validate","btn","PostListContainer","connect","dispatch","then","status","catch","err","console","log","App","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.240b9148.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\r\nimport styles from './post.module.css'\r\nconst Post = (props) => {\r\n    let zeroMake = (e) => {\r\n        if (String(e).length === 1) { return '0' + e } else return e\r\n    }\r\n    let b = new Date(props.created_at)\r\n    let dateOfPublishing = zeroMake(new Date(b).getDay()) + '/' + zeroMake((Number(new Date(b).getMonth()) + 1)) + '/' + zeroMake(new Date(b).getFullYear()) + ' ' +\r\n        zeroMake(new Date(b).getHours()) + ':' + zeroMake(new Date(b).getMinutes())\r\n\r\n\r\n    return <div className={styles.postWrapper}>\r\n        <div className={styles.postDate}>Date of post: {dateOfPublishing}</div>\r\n        <div classneme={styles.authorName}>Authors Id: {props.id}</div>\r\n        <div className={styles.post}>Post text: {props.text}</div>\r\n    </div>\r\n}\r\nexport default Post","import React from 'react'\r\nimport './loader.css'\r\n\r\nconst Loader =() =>{\r\n    return<div\r\n    class=\"loadingio-eclipse\">\r\n      <div class=\"ldio-rpinwye8j0b\">\r\n        <div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n}\r\n\r\nexport default Loader","import * as axios from \"axios\";\r\n\r\n\r\nexport const API = {\r\n    getDataList(link) {\r\n        \r\n        return axios.get(`${link}`)\r\n    }\r\n}","import { API } from \"../api/api\"\r\n\r\nconst GET_DATA = 'GET_DATA'\r\nconst IS_LOADING = 'IS_LOADING'\r\nconst BAD_REQUEST = 'BAD_REQUEST'\r\nconst SET_FORM_TO_STATE = 'SET_FORM_TO_STATE'\r\n\r\nlet initialstate = {\r\n    data: [],\r\n    isLoading: false,\r\n    inputLinkValue: 'http://api.massrelevance.com/MassRelDemo/kindle.json',\r\n    gettingDataMistake: false,\r\n    numberOfPosts: 0,\r\n    veliocityOfChange: 10\r\n\r\n}\r\n\r\n\r\nlet PostReducer = (state = initialstate, action) => {\r\n    switch (action.type) {\r\n        case GET_DATA: {\r\n\r\n\r\n            let stateCopy = { ...state, data: action.response }\r\n            return stateCopy\r\n        }\r\n        case IS_LOADING: {\r\n\r\n            let stateCopy = { ...state, isLoading: action.loadingStatus }\r\n            return stateCopy\r\n        }\r\n        case BAD_REQUEST: {\r\n\r\n            let stateCopy = { ...state, gettingDataMistake: action.gettingDataMistake }\r\n            return stateCopy\r\n        }\r\n\r\n        case SET_FORM_TO_STATE: {\r\n\r\n            let stateCopy = {\r\n                ...state, inputLinkValue: action.inputLinkValue,\r\n                numberOfPosts: action.numberOfPosts, veliocityOfChange: action.veliocityOfChange\r\n            }\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getData = (response) => {\r\n    return { type: GET_DATA, response }\r\n}\r\n\r\nconst isLoading = (loadingStatus) => {\r\n    return { type: IS_LOADING, loadingStatus }\r\n}\r\n\r\nconst badRequestAC = (gettingDataMistake) => {\r\n    return { type: BAD_REQUEST, gettingDataMistake }\r\n}\r\nconst setFormToState = (inputLinkValue, numberOfPosts, veliocityOfChange) => {\r\n    return { type: SET_FORM_TO_STATE, inputLinkValue, numberOfPosts, veliocityOfChange }\r\n}\r\n\r\nexport const getDataThunk = (inputLinkValue, numberOfPosts, veliocityOfChange) => {\r\n\r\n    return (dispatch) => {\r\n\r\n        dispatch(isLoading(true))\r\n        dispatch(setFormToState(inputLinkValue, numberOfPosts, veliocityOfChange))\r\n        API.getDataList(inputLinkValue)\r\n            .then(response => {\r\n\r\n                if (response.status === 200) {\r\n\r\n                    dispatch(isLoading(false))\r\n                    dispatch(getData(response.data))\r\n                    dispatch(badRequestAC(false))\r\n                }\r\n            }\r\n\r\n            ).catch(err => {\r\n                console.log(err)\r\n\r\n                dispatch(badRequestAC(true))\r\n                dispatch(isLoading(false))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateDataThunk = (state) => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(isLoading(true))\r\n        if (state.inputLinkValue === null && state.numberOfPosts === null && state.veliocityOfChange === null) {\r\n            console.log('first loading')\r\n            dispatch(isLoading(false))\r\n        }\r\n        else {\r\n            dispatch(setFormToState(state.inputLinkValue, state.numberOfPosts, state.veliocityOfChange))\r\n            API.getDataList(state.inputLinkValue)\r\n                .then(response => {\r\n                    if (response.status === 200) {\r\n                        dispatch(isLoading(false))\r\n                        dispatch(getData(response.data))\r\n                        dispatch(badRequestAC(false))\r\n                    }\r\n                }\r\n                ).catch(err => {\r\n                    console.log(err)\r\n                    dispatch(badRequestAC(true))\r\n                    dispatch(isLoading(false))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default PostReducer","export const required = value =>{\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n\r\n\r\nexport const maxLengthCreator =(maxLength)=> (value) =>{\r\n   \r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","import React from 'react'\r\nimport styles from './formControlls.module.css'\r\n\r\n\r\nconst FormControl = ({input, meta, child, element, ...props}) =>{\r\n    let someError = meta.touched && meta.error\r\n    \r\n    return(\r\n        <div className={ styles.formcontrol + \" \" +(someError ? styles.error : \"\")}>\r\n            {props.children}\r\n            <div>\r\n                {someError && <span>{meta.error}</span>}\r\n                </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport const Textarea = (props) => {\r\n    \r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    \r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input className={styles.input} {...input} {...restProps} /></FormControl>\r\n}\r\n","import React from 'react'\r\nimport styles from './postList.module.css'\r\nimport Post from '../post/post'\r\nimport Loader from '../../Loader/loader'\r\nimport { connect } from 'react-redux';\r\nimport { getDataThunk, updateDataThunk } from '../../redux/post-reducer'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport { required, maxLengthCreator } from '../../Forms/utils/validator'\r\nimport { Input } from '../../Forms/common/formControlls'\r\n\r\n\r\n\r\nclass PostList extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        // if(this.state.inputLinkValue !== null && this.state.numberOfPosts!== null && this.state.veliocityOfChange!== null)  \r\n        setInterval(\r\n            () => this.props.updateDataThunk(this.state), 1000 * this.props.postPage.veliocityOfChange);\r\n\r\n    }\r\n\r\n\r\n    state = {\r\n        inputLinkValue: null,\r\n        numberOfPosts: null,\r\n        veliocityOfChange: null\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    setDataToLocalState = (values) => {\r\n        this.setState({\r\n            inputLinkValue: values.inputLinkValue,\r\n            numberOfPosts: values.numberOfPosts,\r\n            veliocityOfChange: values.veliocityOfChange\r\n        })\r\n        this.props.getDataThunk(values.inputLinkValue, values.numberOfPosts, values.veliocityOfChange)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let postArray = this.props.postPage.data.slice(0, this.props.postPage.numberOfPosts).map(p =>\r\n            <Post key={p.id} created_at={p.created_at\r\n            } id={p.id} text={p.text} />)\r\n\r\n        return <div className={styles.postListWrapper}>\r\n            <div className={styles.postListForm}>\r\n                <PostReduxForm onSubmit={this.setDataToLocalState} \r\n                inputLinkValue={this.props.postPage.inputLinkValue} />\r\n            </div>\r\n            {this.props.postPage.isLoading ?\r\n                <Loader /> :\r\n                <div className={styles.postListWrapper}>\r\n                    {(!this.props.postPage.gettingDataMistake) ?\r\n                        this.props.postPage.data.length === 0 ? 'Nothing to show. Please, fill the form above to get posts' : postArray :\r\n                        'Get data mistake.Please, fill the form above to get posts'}\r\n                </div>}\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nlet maxLength50 = maxLengthCreator(100)\r\nconst AddPostForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                Put your Feed URL, API with suitable format of data: http://api.massrelevance.com/MassRelDemo/kindle.json\r\n                <Field component={Input} name=\"inputLinkValue\"\r\n                    placeholder=\"inputLinkValue\"\r\n                    validate={[required, maxLength50]}\r\n                />\r\n                How many posts you want to load?:\r\n                <Field component={Input} name=\"numberOfPosts\"\r\n                    placeholder=\"numberOfPosts\"\r\n                    validate={[required, maxLength50]}\r\n                />\r\n                Determine the Update interval(seconds)\r\n\r\n                    <Field component={Input} name=\"veliocityOfChange\"\r\n                    placeholder=\"veliocityOfChange\"\r\n                    validate={[required, maxLength50]}\r\n                />\r\n\r\n\r\n                <button className={styles.btn}>GeT Posts!</button>\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst PostReduxForm = reduxForm({\r\n    form: 'getDataForm'\r\n})(AddPostForm)\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        postPage: state.postPage\r\n    }\r\n}\r\n\r\n\r\nconst PostListContainer = connect(mapStateToProps, { getDataThunk, updateDataThunk })(PostList)\r\n\r\n\r\n\r\n\r\nexport default PostListContainer\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PostList from './components/postList/postList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <PostList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\n\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport PostReducer from \"./post-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    postPage: PostReducer,\r\n    form: formReducer\r\n})\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nwindow.store = store;\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/redux-store'\nimport { Provider } from 'react-redux'\n\nimport { BrowserRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postListWrapper\":\"postList_postListWrapper__gp-68\",\"postListForm\":\"postList_postListForm__2nV2_\",\"optionsWrapper\":\"postList_optionsWrapper__1Kc7g\",\"field\":\"postList_field__EvKPZ\",\"btn\":\"postList_btn__1gJSe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postWrapper\":\"post_postWrapper__3XWPK\",\"postDate\":\"post_postDate__3230A\",\"authorName\":\"post_authorName__2tE7j\",\"post\":\"post_post__1_jiJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formcontrol\":\"formControlls_formcontrol__328Dk\",\"error\":\"formControlls_error___TD5Q\",\"input\":\"formControlls_input__2i3dh\"};"],"sourceRoot":""}